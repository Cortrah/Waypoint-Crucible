Interesting Thoughts

While working on this I keep on finding that state that I think belongs at the leaves,
keeps bubbling up. An example, in crucible.helm.playerconsole.simplecard
the state that seems logical is that the card shows whether it's selected or not and displays it
via a style, when one simplecard is selected, the event bubbles to the playerconsole which
deselects all it's cards and then selects the current card so there is only one ever currently
selected.

But because PlayerConsole is getting its state from game and just passing it through,
it doesn't have the rights to change the props, nor does helm, so I have to add this
all the way up at crucible. However this works because Crucible is already setting the
actual card index.

I guess the question going forward is how much responsibility is eventually going to be
so centralized. Stay tuned.

So in that last pass isSel moved from data to a prop, but now instead of using it as a prop
I can pass it's index in as a prop and the selectedCardIndex as a prop
and determine whether it selected with a computed property so I don't need to change crucible
after all.

so what do I default selectedCardIndex and myIndex to? null? -1? Zakas says not to use null
but it seems to make sense here

When instantiating a new mistle in flight it turned out that
instead of instantiating it as a new component and pushing it onto the array
which threw an error that it wasn't a proper constructor (import vs require?)
I just pushed the props on the array as an object and that worked ok instead.
strange but I guess it makes sense. Need to think about that some more though

It greatly improved the readability to wrap the player props into an es6 class
when you have so many props propagating it's a drag just to keep them up to date
and in order without wrapping them in a simple class.
when it comes to putting other stuff in the classes instead of the vue's
my current thinking is use the classes for validation, law of demeter, logic, and methods
but use watches and computeds in vues to get v-dom caching and reactivity
think of them as convenient extentions of the vue renderer,
a dependency based dom caching layer that uses js instead of tags

arg
